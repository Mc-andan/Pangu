buildscript {
    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
        maven { url "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = mod_version

//adds build number if on a CI server
if (System.getenv().BUILD_NUMBER != null) {
    version += ".${System.getenv().BUILD_NUMBER}"
}

group = mod_group

// Build name as
archivesBaseName = mod_id

minecraft {
    version = minecraft_version + "-" + forge_version
    runDir = "run"
    mappings = mcp_mapping_version

    replace "@MOD_VERSION@", mod_version
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
    maven { url 'https://jitpack.io' }
}

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    embed ('com.github.Mouse0w0:FastReflection:1.0.1') {
        exclude group: 'org.ow2.asm'
    }

    testCompile 'junit:junit:4.12'
}

// Either Forge and Project required Java 8
sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

jar {
    // Adds FMLCorePlugin manifest
    manifest {
        attributes 'FMLCorePlugin': mod_core_plugin
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }

    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
}

// Adds deobfJar
// because the normal output has been made to be obfuscated
task deobfJar(type: Jar, dependsOn: 'jar') {
    from sourceSets.main.output
    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    classifier "dev"
}

artifacts {
    archives deobfJar
}

// IDE Runner Settings from https://blog.ustc-zzzz.net/add-jvm-arguments-to-ide-in-forge-mod-projects/

idea.workspace.iws.withXml {
    def runManager = it.asNode().component.find({ it.@name == 'RunManager' })
    runManager.configuration.findAll({ it.@type == 'Application' }).each {
        def mainClass = it.option.find({ it.@name == 'MAIN_CLASS_NAME' }).@value
        if (mainClass == 'GradleStart' || mainClass == 'GradleStartServer') {
            def jvmArg = String.join(' ', ['-Dfml.coreMods.load=' + mod_core_plugin])
            it.option.find({ it.@name == 'VM_PARAMETERS' }).@value = jvmArg
        }
    }
}